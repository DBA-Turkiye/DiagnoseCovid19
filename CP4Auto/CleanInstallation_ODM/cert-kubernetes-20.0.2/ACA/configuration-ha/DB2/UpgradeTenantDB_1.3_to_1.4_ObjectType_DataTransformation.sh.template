# **************************************************************************************************
# The upgrade of existing tenant database to support Object Type feature consists of two steps:
# Step 1: Upgrade the database schema 
# Step 2: Transform the existing data (this file)
# **************************************************************************************************

#!/bin/bash
db2 connect to $tenant_db_name ;
db2 set schema $tenant_ontology ;

###########################################################
# Insert all value patterns into the IMPLEMENTATION table #
###########################################################
# Collect all value patterns i.e. namespace = 2
echo "###############################################################"
echo "INSERTING ALL EXISTING VALUE PATTERNS INTO IMPLEMENTATION TABLE"
echo "###############################################################"	
db2 -x "select pattern_name, '|', REPLACE(pattern_name,' ','') as symbolic_name, '|', pattern, '|', description as description, '|' from default.pattern where namespace = 2 order by pattern_id asc;" | while read row ; do
	echo "................"
	echo "Processing value pattern=" $row
	
	name=`echo $row | awk -F '|' '{print $1}'`
	symbolic_name=`echo $row | awk -F '|' '{print $2}'`
	object_type_id=4
	impl_type=2
	extraction_tool=1
	flags=0
	description=`echo $row | awk -F '|' '{print $4}'`
	encodedPattern=`echo $row | awk -F '|' '{print $3}'`
	pattern=`echo $encodedPattern | base64 --decode`

	# Build the implementation's config Blob column
	configFormat='{"pattern": "%s"}'
	configBlob=$(printf "$configFormat" $pattern)

	echo $configBlob

	# 	echo "Transformed Implementation=" $name "|" $symbolic_name "|" $object_type_id "|" $impl_type "|" $extraction_tool "|" $flags "|" $description "|" $configBlob

	db2 connect to $tenant_db_name ;
	db2 set schema $tenant_ontology ;
	# Insert one row for both ExtendedNumeric and ExtendedAlphabetic object types		
	db2 "insert into implementation \
	(name, symbolic_name, object_type_id, impl_type, extraction_tool, flags, description, config) \
	values ('$name', '$symbolic_name', '$object_type_id', $impl_type, $extraction_tool, $flags, '$description', cast('$configBlob' as blob))"

	echo "Row inserted.."

	object_type_id=5
	db2 "insert into implementation \
	(name, symbolic_name, object_type_id, impl_type, extraction_tool, flags, description, config) \
	values ('$name', '$symbolic_name', '$object_type_id', $impl_type, $extraction_tool, $flags, '$description', cast('$configBlob' as blob))"

	echo

done

echo

############################################################
# Update KeyClass #
# Get all KeyClasses from the system
# for Each keyClass
#	Get all Aliases; construct KeyContext.KeyAlias
# 	Get all KeyAliasPatterns; 
#		Insert KeyAliasPattern into Implementation, Implementation_KC
#		Construct KeyContent.PatternList
#	Get all ValuePatterns:
#		Insert KeyAliasPattern into Implementation, Implementation_KC
#		Construct KeyContent.PatternList
############################################################
echo "#########################"
echo "PROCESSING EACH KEY CLASS"
echo "##########################"
# Get the list of all key Classes
db2 connect reset
db2 connect to $tenant_db_name ;
db2 set schema $tenant_ontology ;
#keyclasses=(`db2 -x "select key_class_id from key_class where key_class_id > 198 order by key_class_id asc;"`)
keyclasses=(`db2 -x "select key_class_id from key_class order by key_class_id asc;"`)

for i in "${keyclasses[@]}"
do
	db2 connect reset
	db2 connect to $tenant_db_name ;
	db2 set schema $tenant_ontology ;

	echo "................"
	echo ">> Processing started for keyClass with Id=$i"
	keyClassConfigBlob="{}"

	###################
	# Get Key Aliases #
	###################
	declare tmp=""
	while read keyAliasRow ; do
		kalias=`echo $keyAliasRow | awk -F '|' '{print $1}'`
		language="en" 

		kaFull=`echo $kalias`
		ka=`echo { \"KeyAliasName\": \"$kaFull\", \"Language\": \"$language\" }`
		
		if [ -z "$tmp" ]	#tmp is empty
		then
			tmp="$ka"
		else				#tmp is not empty
			tmp="$tmp,$ka"
		fi	 
	 
	done <<< $(db2 -x "SELECT ka.key_alias_name, '|' FROM key_class kc INNER JOIN key_alias_kc kakc ON kakc.key_class_id = kc.key_class_id INNER JOIN key_alias ka ON ka.key_alias_id = kakc.key_alias_id where kc.key_class_id = $i;" )


	# Build the entire list of key aliases
	declare KeyAliasList=""
	if [ -z "$tmp" ]
	then
		echo "No key aliases defined for keyclass " ${keyclasses[i]}
	else
		KeyAliasList=$tmp
	fi
	
	echo "Built KeyAliasesList=$KeyAliasList"



	##########################
	# Get Key Alias Patterns #
	##########################
	db2 connect reset
	db2 connect to $tenant_db_name ;
	db2 set schema $tenant_ontology ;
	declare tmp=""
	while read keyAliasPatternRow ; do
		
		echo "keyAliasPatternRow=<"$keyAliasPatternRow">"
		if [ -z "$keyAliasPatternRow" ]
		then
			echo "No key alias patterns are defined for keyclass with Id=$i"
		else
		
			name=`echo $keyAliasPatternRow | awk -F '|' '{print $1}'`
			symbolicName=`echo $keyAliasPatternRow | awk -F '|' '{print $2}'`
			description=`echo $keyAliasPatternRow | awk -F '|' '{print $3}'`
			namespace="keyExtractor"
			extractionTool="regex"
			encodedPattern=`echo $keyAliasPatternRow | awk -F '|' '{print $4}'`
			pattern=`echo $encodedPattern | base64 --decode`
					
			ka=`echo { \"name\": \"$name\", \"symbolicName\": \"$symbolicName\", \"description\": \"$description\", \"namespace\": \"$namespace\", \"extractionTool\": \"$extractionTool\", \"pattern\": \"$pattern\" }`
		
			if [ -z "$tmp" ]	#tmp is empty
			then
				tmp="$ka"
			else				#tmp is not empty
				tmp="$tmp,$ka"
			fi	 
			
			# Insert the KeyAlias pattern into Implementation table
			kaConfigFormat='{"pattern": "%s"}'
			kaConfigBlob=$(printf "$kaConfigFormat" $pattern)
			
			kaObjectType=`echo $keyAliasPatternRow | awk -F '|' '{print $6}'`
			kaImplType=1
			kaExtractionTool=1
			kaFlags=1
			
			echo "Inserted Key Alias Pattern into implementation table for keyClass with Id=$i"
 			db2 "insert into implementation \
 			(name, symbolic_name, object_type_id, impl_type, extraction_tool, flags, description, config) \
 			values ('$name', '$symbolicName', '$kaObjectType', $kaImplType, $kaExtractionTool, $kaFlags, '$description', cast('$kaConfigBlob' as blob))"

			# Get the inserted implementation ID and use it to insert into the Implementation_KC table
			insertedID=(`db2 -x "select impl_Id from implementation where object_type_id = $kaObjectType and symbolic_name = '$symbolicName'"`)
			
			echo 
			echo "Inserting KeyAlias pattern reference into Implementation_KC -> ImplId=$insertedID, KeyClass=$i, flags=1"		
			db2 "insert into implementation_kc (impl_id, key_class_id, flags) values ($insertedID, $i, 1)"

			

	 	fi	#end of 'if' for checking if pattern exists

	 	
	 	
 	done <<< $(db2 -x "SELECT p.pattern_name, '|', REPLACE((CONCAT( REPLACE(p.pattern_name,' ',''), REPLACE(kc.key_class_name,' ', ''))), '%20',''), '|', p.description , '|', p.pattern ,'|', kc.key_class_id, '|' , kc.datatype, '|' FROM pattern_kc pkc INNER JOIN pattern p ON pkc.pattern_id = p.pattern_id INNER JOIN key_class kc ON kc.key_class_id = pkc.key_class_id WHERE p.namespace = 1 AND kc.key_class_id = $i;")
	
	declare PatternList=""
	if [ -z "$tmp" ]
	then
		echo "Not adding any PatternList for keyclass $i"
	else
		PatternList=$tmp
	fi
	
	echo "Built PatternList=$PatternList"
	
	declare kcKeyAliasList=""
	declare kcPatternList=""
	declare keyContext=""
	if [[ -z "$PatternList" && -z "$KeyAliasList" ]]
	then
		echo "Both PatternList and keyAliasListEmpty"
	else
		if [ -z "$KeyAliasList" ]
		then
			echo "Empty PatternList"
			keyContext=`echo \"KeyContent\" : { \"PatternList\": [ $PatternList ] }`
		elif [ -z "$PatternList" ]
		then
			keyContext=`echo \"KeyContent\" : { \"KeyAliasList\": [ $KeyAliasList ] }`
		else
			keyContext=`echo \"KeyContent\" : { \"KeyAliasList\": [ $KeyAliasList ] , \"PatternList\": [ $PatternList ] }`
		fi

	fi
	
	echo 
	echo "Built KeyContext=$keyContext"

	if [ -z "$i" ]
	then
		break
	fi



	######################
	# Get Value Patterns #
	######################
	db2 connect reset
	db2 connect to $tenant_db_name ;
	db2 set schema $tenant_ontology ;	
	declare tmp=""
	declare implInfo=""
	while read valuePatternRow ; do
		
		declare name=""
		declare datatype=""
		declare patternType=""
		
		if [ -z "$valuePatternRow" ] 
		then
			continue
		fi
		
		echo "ValuePattern for KeyClassId $i=$valuePatternRow"
		name=`echo $valuePatternRow | awk -F '|' '{print $1}' | xargs`
		datatype=`echo $valuePatternRow | awk -F '|' '{print $2}' | xargs`
		patternType=`echo $valuePatternRow | awk -F '|' '{print $3}' | xargs` #isValueWithOptionalKeyAlias
		

		implInfo=(`db2 -x "select REPLACE(CONCAT( CONCAT ( CONCAT( CONCAT(obj.scope, '.'), obj.symbolic_name), '.'),impl.symbolic_name), ' ', ''), '|', impl.impl_id, '|' from implementation impl INNER JOIN object_type obj on obj.object_type_id = impl.object_type_id where impl.object_type_id = $datatype and impl.name = '$name';"`)
		
		echo "Implementation details= ${implInfo[*]}"
		objName=`echo ${implInfo[*]} | awk -F '|' '{print $1}' | xargs`
		implId=`echo ${implInfo[2]} | xargs`
# 		echo "ObjectName=$objName; ImplId=$implId"
# 		
# 		echo "Name:<$name> - Datatype:<$datatype> - PatternType:<$patternType>"
		declare valueWithOptionalKeyAlias="false"
		declare flags=0
		if [ "$patternType" = "3" ]
		then 
			valueWithOptionalKeyAlias="true"
			flags=1
		fi
		
		impl=`echo { \"implRef\": \"$objName\", \"isValueWithOptionalKeyAlias\" : $valueWithOptionalKeyAlias } `
		
		if [ -z "$tmp" ]	#tmp is empty
			then
				tmp="$impl"
			else				#tmp is not empty
				tmp="$tmp,$impl"
		fi
		
		## Insert into implementation_kc
		echo 
		echo "Inserting Value pattern reference into Implementation_KC -> ImplId=$implId, KeyClass=$i, flags=$flags"
		db2 "insert into implementation_kc (impl_id, key_class_id, flags) values ($implId, $i, $flags)"

	done <<< $(db2 -x "SELECT p.pattern_name, '|' , kc.datatype, '|', pkc.pattern_type, '|' from pattern_kc pkc INNER JOIN pattern p ON pkc.pattern_id = p.pattern_id INNER JOIN key_class kc ON kc.key_class_id = pkc.key_class_id where p.namespace = 2 AND kc.key_class_id = $i;")

	
	declare extractor=""
	if [ -z "$tmp" ]
	then
		echo "No value patterns defined for keyclass " ${keyclasses[i]}
	else
		extractor=`echo \"extractor\" : { \"implementationList\" : [  $tmp ] }`
	fi
	
	echo "Built extractor for KeyClass with Id $i = $extractor"

	## Build the KeyClass Config to update
	if [[ -z "$keyContext" && -z "$extractor" ]]
	then
		echo "No KeyContext or extractor available for the keyClass - " $i
		keyClassConfigBlob=`echo {}`
	elif [ -z "$keyContext" ]
	then
		keyClassConfigBlob=`echo { $extractor }`
	elif [ -z "$extractor" ]
	then
		keyClassConfigBlob=`echo { $keyContext }`
	else
		keyClassConfigBlob=`echo { $keyContext, $extractor }`
	fi
	
	echo "keyClassConfigBlob= $keyClassConfigBlob"
	echo "Updating KeyClass"
	db2 "update key_class set config = cast('$keyClassConfigBlob' as blob) where key_class_id=$i "

	echo "<< Processing completed for keyClass=$i"
	echo 	
	echo
done	# End of KeyClass
